{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","usr","i","key","SearchBox","filterRobots","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispach","event","payload","target","value","fetch","then","response","json","user","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.c801c7b8.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?10x10`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n    return (\n        <div className='tc'>\n            {\n                robots.map((usr, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({ filterRobots, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 b3 b--green bg-lightest-blue'\n                type='searchBox'\n                placeholder='search robots here'\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div\n            style={\n                {\n                    overflow: 'scroll',\n                    border: '5px solid black',\n                    height: '610px'\n                }\n            }>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport './App.css'\nimport 'tachyons'\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapSateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n\n}\n\nconst mapDispatchToProps = (dispach) => {\n  return {\n    onSearchChange: (event) => dispach(setSearchField(event.target.value)),\n    onRequestRobots: () => dispach(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props\n    const filterRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RobotsFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          {isPending ? <h1>Loading</h1> :\n            <CardList robots={filterRobots} />\n          }\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapSateToProps, mapDispatchToProps)(App)","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispach) => {\n    dispach({ type: REQUEST_ROBOTS_PENDING })\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(user => dispach({\n            type: REQUEST_ROBOTS_SUCCESS,\n            payload: user\n        }))\n        .catch(error => dispach({\n            type: REQUEST_ROBOTS_FAILED,\n            payload: error\n        }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\n\n// -->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->--> states\nconst initialStateSearch = {\n    searchField: ''\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\n// -->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->--> reducers functions\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state\n    }\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}